{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","web3","setWeb3","setAccount","connectWallet","a","window","ethereum","request","method","accounts","console","log","focus","navigator","clipboard","writeText","useEffect","location","search","params","URLSearchParams","web","Web3","Contract","eth","actionStr","get","methods","setMintPirce","send","from","on","receipt","err","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8jBAiDeA,MA9Cf,WACE,MAAwBC,qBAAxB,mBAAOC,EAAP,KAAaC,EAAb,KAEA,EAA8BF,mBAAS,IAAvC,mBAAgBG,GAAhB,WAEMC,EAAa,uCAAG,4BAAAC,EAAA,sEACGC,OAAOC,SAASC,QAAQ,CAC3CC,OAAQ,wBAFQ,OACdC,EADc,OAIlBC,QAAQC,IAAIF,GACZP,EAAWO,EAAS,IACpBJ,OAAOO,QACPC,UAAUC,UAAUC,UAAUN,EAAS,IAPrB,2CAAH,qDAUnBO,qBAAU,WACRN,QAAQC,IAAI,eAAgBN,OAAOY,UACnCP,QAAQC,IAAI,sBAAuBN,OAAOY,SAASC,QAEnD,IAAMC,EAAS,IAAIC,gBAAgBf,OAAOY,SAASC,QACnD,GAA+B,qBAApBb,OAAOC,SAChB,IACE,IAAMe,EAAM,IAAIC,IAAKjB,OAAOC,UAE5BL,EAAQoB,GAER,IAAME,EAAWvB,EAAKwB,IAAID,SAAT,qqBAAwrB,8CAErsBE,EAAYN,EAAOO,IAAI,UACV,QAAbD,EACFtB,IACqB,QAAbsB,GACNF,EAASI,QAAQC,aAAa,KAAKC,KAAK,CAACC,KAAO,+CAC/CC,GAAG,WAAW,SAASC,GACtBtB,QAAQC,IAAIqB,GACZ3B,OAAOO,QACPC,UAAUC,UAAUC,UAAU,WAGrC,MAAMkB,GACLvB,QAAQC,IAAIsB,MAGf,KClCUC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,SCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.e81305d2.chunk.js","sourcesContent":["import {useEffect, useState} from 'react';\nimport Web3 from 'web3';\n\nfunction App() {\n  const [web3, setWeb3] = useState();\n\n  const [account, setAccount] = useState('');\n\n  const connectWallet = async() => {\n      var accounts = await window.ethereum.request({\n        method: \"eth_requestAccounts\",\n      });\n      console.log(accounts)   \n      setAccount(accounts[0]);      \n      window.focus();\n      navigator.clipboard.writeText(accounts[0]);    \n  }\n\n  useEffect(() => {\n    console.log(\"location >>>\", window.location);\n    console.log(\"location.search >>>\", window.location.search);\n\n    const params = new URLSearchParams(window.location.search);\n    if (typeof window.ethereum !== \"undefined\") {\n      try {\n        const web = new Web3(window.ethereum);\n        \n        setWeb3(web);\n        \n        const Contract = web3.eth.Contract(`[{\"anonymous\": false,\"inputs\": [{\"indexed\": true,\"internalType\": \"address\",\"name\": \"previousOwner\",\"type\": \"address\"},{\"indexed\": true,\"internalType\": \"address\",\"name\": \"newOwner\",\"type\": \"address\"}],\"name\": \"OwnershipTransferred\",\"type\": \"event\"},{\"inputs\": [],\"name\": \"owner\",\"outputs\": [{\"internalType\": \"address\",\"name\": \"\",\"type\": \"address\"}],\"stateMutability\": \"view\",\"type\": \"function\"},{\"inputs\": [],\"name\": \"renounceOwnership\",\"outputs\": [],\"stateMutability\": \"nonpayable\",\"type\": \"function\"},{\"inputs\": [{\"internalType\": \"address\",\"name\": \"newOwner\",\"type\": \"address\"}],\"name\": \"transferOwnership\",\"outputs\": [],\"stateMutability\": \"nonpayable\",\"type\": \"function\"}]`, '0x2d1C5Ad38c2598Ced437dB25642911C9dFc73D16');\n\n        var actionStr = params.get(\"action\")\n        if (actionStr == \"sign\") {\n          connectWallet();               \n        } else if(actionStr == \"send\") {\n            Contract.methods.setMintPirce(120).send({from : '0x65BE7F45E4f8A8E9021CaFC418697DeC01dAc745'})\n            .on('receipt', function(receipt){\n              console.log(receipt)\n              window.focus();\n              navigator.clipboard.writeText(\"true\");    \n            })\n        }               \n      }catch(err) {\n        console.log(err);\n      }\n    }\n  }, []);\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}